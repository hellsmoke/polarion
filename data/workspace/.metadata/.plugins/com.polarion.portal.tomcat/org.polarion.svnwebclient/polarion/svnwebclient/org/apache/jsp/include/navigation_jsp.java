/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2017-05-15 13:19:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.include;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.polarion.platform.i18n.Localization;
import com.polarion.core.util.EscapeChars;
import org.polarion.svnwebclient.web.model.Navigation;
import org.polarion.svnwebclient.web.model.Link;
import org.polarion.svnwebclient.web.model.Button;
import java.util.Iterator;
import org.polarion.svnwebclient.web.model.PathSwitch;
import org.polarion.svnwebclient.web.model.PageInfo;

public final class navigation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.polarion.svnwebclient.web.model.PageInfo");
    _jspx_imports_classes.add("com.polarion.core.util.EscapeChars");
    _jspx_imports_classes.add("org.polarion.svnwebclient.web.model.Navigation");
    _jspx_imports_classes.add("com.polarion.platform.i18n.Localization");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("org.polarion.svnwebclient.web.model.PathSwitch");
    _jspx_imports_classes.add("org.polarion.svnwebclient.web.model.Link");
    _jspx_imports_classes.add("org.polarion.svnwebclient.web.model.Button");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.polarion.svnwebclient.web.controller.AbstractBean bean = null;
      bean = (org.polarion.svnwebclient.web.controller.AbstractBean) _jspx_page_context.getAttribute("bean", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (bean == null){
        throw new java.lang.InstantiationException("bean bean not found within scope");
      }
      out.write('\r');
      out.write('\n');

    Navigation navigation = bean.getNavigation();
    if (navigation != null) {   
        PageInfo currentPageInfo = bean.getCurrentPageInfo();
      
        String params = EscapeChars.forJavascriptString(currentPageInfo.getParameters());        
        if (params == null) {
            params = "";
        }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\">\r\n");
      out.write("    <tr class=\"path_node\">\r\n");
      out.write("        <td nowrap=\"true\">\r\n");
      out.write("            <span class=\"pathFormat\">\r\n");

        if (navigation.getCurrentRevision() != null) {

      out.write("             \r\n");
      out.write("                ");
      out.print( Localization.getString("svnwebclient.navigation.pathWithRevision", navigation.getCurrentRevision()) );
      out.write('\r');
      out.write('\n');

        } else {

      out.write("    \r\n");
      out.write("                ");
      out.print( Localization.getString("svnwebclient.navigation.pathWithoutRevision") );
      out.write('\r');
      out.write('\n');

        }

      out.write("    \r\n");
      out.write("            </span>\r\n");
      out.write("        </td>\r\n");
      out.write("        <td width=\"100%\" nowrap=\"true\">\r\n");
      out.write("            <table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\r\n");
      out.write("                <tr>\r\n");
	
		int count = 0;
        for (Iterator i = navigation.getPath().iterator(); i.hasNext(); ) {
            Link pathElement = (Link) i.next();
			if (count == 0) {
				count ++;

      out.write("\t\t\t\r\n");
      out.write("\t\t\t\t\t<td nowrap=\"true\">\r\n");
      out.write("                    \t <a class=\"path_t\" href=\"");
      out.print(pathElement.getUrl());
      out.write("\"><span  class=\"path_text\">");
      out.print(pathElement.getName());
      out.write("</span></a>        \r\n");
      out.write("                    </td>\r\n");

			} else {						

      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<td nowrap=\"true\">\r\n");
      out.write("                    \t <a class=\"path_t\" href=\"");
      out.print(pathElement.getUrl());
      out.write('"');
      out.write('>');
      out.print(pathElement.getName());
      out.write("</a>        \r\n");
      out.write("                    </td>\r\n");
                    
			}
            if (i.hasNext()) {

      out.write("\r\n");
      out.write("                    <td style=\"padding-left:1px;padding-right:1px;\">\r\n");
      out.write("                        <span class=\"path_t\">/</span>\r\n");
      out.write("                    </td>\r\n");

            }                
        }

      out.write("    \r\n");
      out.write("                    <td width=\"100%\"/>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </table>\r\n");
      out.write("        </td>\r\n");
      out.write("        <script type=\"text/javascript\">\r\n");
      out.write("        \tbrowserPageLoaded(\"");
      out.print(currentPageInfo.getPage());
      out.write("\", \"");
      out.print(currentPageInfo.getPath());
      out.write("\", \"");
      out.print(params);
      out.write("\");\r\n");
      out.write("        </script>\r\n");

        if (navigation.isShowPathSwitch()) {
            PathSwitch pathSwitch = navigation.getPathSwitch();

      out.write("\r\n");
      out.write("        <td align=\"right\" style=\"padding-top:0;padding-bottom:0;padding-left:5px;padding-right:5px;\">\r\n");
      out.write("            <select name=\"pathswitch\" class=\"combo\" style=\"font-size:10px;font-family:Arial\" onchange=\"if (this.options[this.selectedIndex].value != 'null') { window.location.href=(this.options[this.selectedIndex].value) }\">\r\n");

            for (Iterator i = pathSwitch.getElements().iterator(); i.hasNext(); ) {
                PathSwitch.Element element = (PathSwitch.Element) i.next();
                if (element.isSelected()) {

      out.write("            \r\n");
      out.write("                <option value=\"");
      out.print(element.getUrl());
      out.write("\" selected>      \r\n");

                } else {

      out.write("                                                \r\n");
      out.write("                <option value=\"");
      out.print(element.getUrl());
      out.write("\">      \r\n");

                }                

      out.write("            \r\n");
      out.write("                    ");
      out.print(element.getName());
      out.write("\r\n");
      out.write("                </option>\r\n");

            }                          

      out.write("        \r\n");
      out.write("            </select>\r\n");
      out.write("        </td>        \r\n");

        }        

      out.write('\r');
      out.write('\n');

        for (Iterator i = navigation.getButtons().iterator(); i.hasNext(); ) {
            Button button = (Button) i.next();
            if (i.hasNext() == false) {

      out.write("\r\n");
      out.write("        <td align=\"right\" style=\"padding-right:1px;\">\r\n");

            } else {

      out.write("\r\n");
      out.write("        <td align=\"right\">\r\n");

        }

      out.write("        \r\n");
      out.write("            <a href=\"");
      out.print(button.getUrl());
      out.write("\">\r\n");
      out.write("                <img src=\"");
      out.print(button.getImage());
      out.write("\" alt=\"");
      out.print(button.getCaption());
      out.write("\" title=\"");
      out.print(button.getCaption());
      out.write("\" style=\"white-space:pre; padding:0 10 0 0; margin:0 0 0 0; cursor:pointer;\" border=\"0\"/>\r\n");
      out.write("            </a>\r\n");
      out.write("        </td>        \r\n");

        }

      out.write("\r\n");
      out.write("    </tr>\r\n");
      out.write("</table>\r\n");

    }

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
