/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2017-05-17 11:07:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.polarion.platform.i18n.Localization;
import org.polarion.svnwebclient.web.model.data.*;
import org.polarion.svnwebclient.decorations.IIconDecoration;

public final class revisionList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("org.polarion.svnwebclient.web.model.data");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.polarion.svnwebclient.decorations.IIconDecoration");
    _jspx_imports_classes.add("com.polarion.platform.i18n.Localization");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      org.polarion.svnwebclient.web.controller.RevisionListBean bean = null;
      bean = (org.polarion.svnwebclient.web.controller.RevisionListBean) _jspx_page_context.getAttribute("bean", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (bean == null){
        bean = new org.polarion.svnwebclient.web.controller.RevisionListBean();
        _jspx_page_context.setAttribute("bean", bean, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\r');
      out.write('\n');

    if (bean.execute(request, response)) {
        RevisionList content = bean.getRevisionList();

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "include/head.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("jsp.head.title", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf( Localization.getString("svnwebclient.revisionList.title") ), request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("    <body>\r\n");
      out.write("        <table cellspacing=\"0\" cellpadding=\"0\" width=\"100%\" height=\"100%\">\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>\r\n");
      out.write("                    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "include/top.jsp", out, false);
      out.write("\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td style=\"padding:0;spacing:0px; padding-left:5px; padding-right:5px; padding-top:2px;\">\r\n");
      out.write("                    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "include/infoPanel.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("jsp.infoPanel.info", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("revisionListInfo.jsp", request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("jsp.infoPanel.options", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("revisionListOptions.jsp", request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td height=\"100%\" valign=\"top\" style=\"padding:0;spacing:0px; padding-left:5px; padding-right:5px;padding-bottom:5px;\"> \r\n");
      out.write("                    <form name=\"revisionform\" style=\"margin:0;padding:0;\">             \r\n");
      out.write("                        <table id=\"table_list_of_revisions\" name=\"table_list_of_revisions\" class=\"list\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" rules=\"all\">\r\n");
      out.write("                            <tr>\r\n");
      out.write("                                <th></th>\r\n");
      out.write("                                <th nowrap=\"true\" width=\"5%\">\r\n");
      out.write("                                    ");
      out.print( Localization.getString("svnwebclient.revprops.revision") );
      out.write("\r\n");
      out.write("                                </th>\r\n");
      out.write("                                <th nowrap=\"true\" width=\"5%\">\r\n");
      out.write("                                    ");
      out.print( Localization.getString("svnwebclient.revprops.date") );
      out.write("\r\n");
      out.write("                                </th>\r\n");
      out.write("                                <th nowrap=\"true\" width=\"10%\">\r\n");
      out.write("                                    ");
      out.print( Localization.getString("svnwebclient.revprops.author") );
      out.write("\r\n");
      out.write("                                </th>\r\n");
      out.write("                                <th nowrap=\"true\" width=\"75%\">\r\n");
      out.write("                                    ");
      out.print( Localization.getString("svnwebclient.revprops.comment") );
      out.write("\r\n");
      out.write("                                </th>\r\n");
      out.write("                                <th>\r\n");
      out.write("                                    ");
      out.print( Localization.getString("svnwebclient.revisionList.actions") );
      out.write("\r\n");
      out.write("                                </th>\r\n");
      out.write("                            </tr>\r\n");

		int counter = 0;
        for (int i = 0; i < content.getRevisions().size(); i++) {
            RevisionList.Element element = (RevisionList.Element) content.getRevisions().get(i);

      out.write("            \r\n");
      out.write("                            <tr onmouseover=\"selectRow(this)\" onmouseout=\"deselectRow(this)\">\r\n");
      out.write("                                <td style=\"padding:0; padding-left:2px; padding-right:2px; text-align: center;\">\r\n");
      out.write("                                    <input name=\"revision\" type=\"checkbox\" value=\"");
      out.print(element.getRevision());
      out.write("\" id=\"revision");
      out.print(element.getRevision());
      out.write("\" onclick=\"checkRevision('revision");
      out.print(element.getRevision());
      out.write("')\"/>\r\n");
      out.write("                                </td>\r\n");
      out.write("                                                              \r\n");
      out.write("                                  <td>         \r\n");
      out.write("                                  \r\n");
      out.write("\r\n");
      out.write("                                    <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\r\n");
      out.write("                                        <tr>                                        \r\n");
      out.write("                                       \t\t<td class=\"internal\" width=\"16px\" style=\"padding-right:5px;\">\r\n");

            if (element.isHeadRevision()) {

      out.write("\r\n");
      out.write("                                                <img src=\"images/head.gif\" alt=\"");
      out.print( Localization.getString("svnwebclient.revisionList.headRevision") );
      out.write("\" title=\"");
      out.print( Localization.getString("svnwebclient.revisionList.headRevision") );
      out.write("\" border=\"0\"/>\r\n");

            } else {

      out.write("                  \r\n");
      out.write("                                                <img src=\"images/pixel.gif\" border=\"0\" width=\"16px\"/>\r\n");

            }                                                                                  

      out.write("            \r\n");
      out.write("                                            </td>\r\n");
      out.write("                                        \r\n");
      out.write("                                            <td class=\"internal\" width=\"100%\" nowrap=\"true\" style=\"padding-right:5px;\" align=\"right\">                               \r\n");
      out.write("\t\t\t                                    <a href=\"");
      out.print(element.getRevisionUrl());
      out.write("\">\r\n");
      out.write("\t\t\t                                        ");
      out.print(element.getDecoratedRevision());
      out.write("\r\n");
      out.write("\t\t\t                                    </a>\r\n");
      out.write("\t\t\t                                </td>   \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t <td class=\"internal\" width=\"16px\">\r\n");

            if (element.isRevisionDecorated()) {
                IIconDecoration decoration = element.getRevisionDecoration();
                if (decoration.getIconLink() != null) {

      out.write("\r\n");
      out.write("                                                <a target=\"_top\" href=\"");
      out.print(decoration.getIconLink());
      out.write("\">\r\n");

                }                                            

      out.write("                \r\n");
      out.write("                                                    <img src=\"");
      out.print(decoration.getIconURL());
      out.write("\" alt=\"");
      out.print(decoration.getIconTooltip());
      out.write("\" title=\"");
      out.print(decoration.getIconTooltip());
      out.write("\" border=\"0\" width=\"16px\"/>\r\n");

                if (decoration.getIconLink() != null) {

      out.write("\r\n");
      out.write("                                                </a>                                            \r\n");

                }
            } else {

      out.write("                \r\n");
      out.write("                                                <img src=\"images/pixel.gif\" border=\"0\" width=\"16px\"/>\r\n");

            }                                            

      out.write("            \r\n");
      out.write("                                            </td>                                                                                                     \r\n");
      out.write("                                        </tr>\r\n");
      out.write("                                    </table>\r\n");
      out.write("                                </td>\r\n");
      out.write("                                \r\n");
      out.write("                                \r\n");
      out.write("                                \r\n");
      out.write("                                \r\n");
      out.write("                                                                                                                                                                                       \r\n");
      out.write("                                <td nowrap=\"true\">\r\n");
      out.write("                                    <span title=\"");
      out.print( Localization.getString("svnwebclient.revprops.ago", element.getAge()) );
      out.write('"');
      out.write('>');
      out.print(element.getDate());
      out.write("</span>\r\n");
      out.write("                                </td>\r\n");
      out.write("                                <td nowrap=\"true\">\r\n");
      out.write("                                    ");
      out.print(element.getAuthor());
      out.write("\r\n");
      out.write("                                </td>\r\n");
      out.write("                                \r\n");
      out.write("                                \r\n");
      out.write("                                \r\n");
                                
			if (element.isMultiLineComment()) {
				counter ++;
				String cell = "cell_" + counter;
				String tool = "tooltip_" + counter;

      out.write("\t\r\n");
      out.write("\t\t\t\t\t\t\t\t<td id=\"");
      out.print(cell);
      out.write("\" onmouseover=\"xstooltip_show('");
      out.print(tool);
      out.write("', '");
      out.print(cell);
      out.write("');\" onmouseout=\"xstooltip_hide('");
      out.print(tool);
      out.write("');\">\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div id=\"");
      out.print(tool);
      out.write("\" class=\"xstooltip\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t");
      out.print(element.getTooltip());
      out.write("\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<img src=\"images/multiline_text.gif\" style=\"position:absolute;margin-top:2px\" align=\"middle\" width=\"8\" height=\"9\">\r\n");
      out.write("\t\t\t\t     \t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;");
      out.print(element.getFirstLine());
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t     \t\t\t</td>\t\r\n");

			} else {								 

      out.write("\t\t\t\t    \r\n");
      out.write("\t\t\t\t\t         \t<td>\r\n");
      out.write("                                    ");
      out.print(element.getComment());
      out.write("\r\n");
      out.write("                                </td>\r\n");

			}

      out.write(" \r\n");
      out.write("                                \r\n");
      out.write("                                \r\n");
      out.write("                                <td>\r\n");
      out.write("                                    <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\r\n");
      out.write("                                        <tr>\r\n");
      out.write("                                            <td class=\"internal\" width=\"16px\" style=\"padding-right:5px;\">\r\n");
      out.write("                                                <a href=\"");
      out.print(element.getRevisionInfoUrl());
      out.write("\">\r\n");
      out.write("                                                   <img src=\"images/show_affected_path.gif \" alt=\"");
      out.print( Localization.getString("svnwebclient.revisionList.revisionChanges") );
      out.write("\" title=\"");
      out.print( Localization.getString("svnwebclient.revisionList.revisionChanges") );
      out.write("\" border=\"0\"></img>\r\n");
      out.write("                                                </a>\r\n");
      out.write("                                            </td>                                          \r\n");
      out.write("                                            <td class=\"internal\" width=\"16px\">\r\n");

            if (content.isDirectory()) {                                        

      out.write("\r\n");
      out.write("                                                <img src=\"images/pixel.gif\" border=\"0\" width=\"16px\"/>\r\n");

            } else {

      out.write("                \r\n");
      out.write("                                                <a href=\"");
      out.print(element.getDownloadUrl());
      out.write("\">\r\n");
      out.write("                                                   <img src=\"images/download.gif\" alt=\"");
      out.print( Localization.getString("svnwebclient.revisionList.download") );
      out.write("\" title=\"");
      out.print( Localization.getString("svnwebclient.revisionList.download") );
      out.write("\" border=\"0\"></img>\r\n");
      out.write("                                                </a>\r\n");

            }                                            

      out.write("            \r\n");
      out.write("                                            </td>                                                                                   \r\n");
      out.write("                                        </tr>\r\n");
      out.write("                                    </table>\r\n");
      out.write("                                </td>\r\n");
      out.write("                            </tr>\r\n");
    
        }

      out.write("\r\n");
      out.write("                        </table>\r\n");
      out.write("                    </form>                    \r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>\r\n");
      out.write("                    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "include/footer.jsp", out, false);
      out.write("\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("    </body>\r\n");
      out.write("    <script language=\"javascript\">\r\n");
      out.write("        firstsecond('table_list_of_revisions');\r\n");
      out.write("    </script>\r\n");
      out.write("</html>\r\n");

    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
