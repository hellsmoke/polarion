/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2017-05-15 13:21:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.include.options;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Set;
import java.util.Iterator;

public final class fileContentOptions_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.util.Set");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                 \r\n");
      org.polarion.svnwebclient.web.controller.file.FileContentBean bean = null;
      bean = (org.polarion.svnwebclient.web.controller.file.FileContentBean) _jspx_page_context.getAttribute("bean", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (bean == null){
        throw new java.lang.InstantiationException("bean bean not found within scope");
      }
      out.write("\r\n");
      out.write("\r\n");
      out.write("<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" height=\"100%\"> \r\n");
      out.write("<form name=\"form.options\">\r\n");
      out.write("    <tr>\r\n");
      out.write("        <td style=\"padding-right:20px;\">\r\n");
      out.write("            <select name=\"views\" class=\"combo\" onchange=\"javascript:changeSelect()\">\r\n");

    for (Iterator i = bean.getViews().keySet().iterator(); i.hasNext(); ) {
        String view = (String) i.next();
        String viewUrl = (String) bean.getViews().get(view);
        
        
        if (bean.getSelectedView().equals(view)) {

      out.write("                 \r\n");
      out.write("                <option value=\"");
      out.print(viewUrl);
      out.write("\" selected>\r\n");
      out.write("                    ");
      out.print(view);
      out.write("\r\n");
      out.write("                </option>                    \r\n");

        } else {

      out.write("            \r\n");
      out.write("                <option value=\"");
      out.print(viewUrl);
      out.write("\">\r\n");
      out.write("                    ");
      out.print(view);
      out.write("\r\n");
      out.write("                </option>\r\n");

        }                        
    }                

      out.write("    \r\n");
      out.write("\r\n");
      out.write("            </select>\r\n");
      out.write("        </td>\r\n");
      out.write("        \r\n");
      out.write("       \r\n");
      out.write("\r\n");
      out.write("        <td style=\"padding-right:20px;\">\r\n");
      out.write("            <select name=\"encodings\" class=\"combo\" onchange=\"javascript:changeSelect()\">\r\n");

    for (Iterator i = bean.getCharacterEncodings().iterator(); i.hasNext(); ) {
        String encoding = (String) i.next();        
        if (bean.isSelectedCharacterEncoding(encoding)) {

      out.write("                 \r\n");
      out.write("                <option value=\"");
      out.print(encoding);
      out.write("\" selected>\r\n");

        } else {

      out.write("            \r\n");
      out.write("                <option value=\"");
      out.print(encoding);
      out.write("\">\r\n");

        }                        

      out.write("        \r\n");
      out.write("                    ");
      out.print(encoding);
      out.write("\r\n");
      out.write("                </option>\r\n");

    }                

      out.write("    \r\n");
      out.write("            </select>\r\n");
      out.write("        </td>             \r\n");
      out.write("        \r\n");
      out.write("    </tr>\r\n");
      out.write("    \r\n");
      out.write("</form>    \r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script language=\"JavaScript\">\r\n");
      out.write("\r\n");
      out.write("    function changeSelect() {                       \r\n");
      out.write("        var views = document.forms[\"form.options\"].elements[\"views\"];\r\n");
      out.write("        var encodings = document.forms[\"form.options\"].elements[\"encodings\"];\r\n");
      out.write("        var encoding = encodings.options[encodings.selectedIndex].value;\r\n");
      out.write("        \r\n");
      out.write("        var url = views.options[views.selectedIndex].value + \"&encoding\" + \"=\" + encoding;        \r\n");
      out.write("        frames['content_frame'].location.href=url;        \r\n");
      out.write("    }\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
