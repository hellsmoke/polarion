/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2017-05-15 10:09:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.includes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.polarion.platform.i18n.Localization;
import com.polarion.core.util.EscapeChars;
import com.polarion.core.boot.BootPlugin;

public final class head_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.polarion.core.util.EscapeChars");
    _jspx_imports_classes.add("com.polarion.platform.i18n.Localization");
    _jspx_imports_classes.add("com.polarion.core.boot.BootPlugin");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n");
      out.write("<!DOCTYPE html \r\n");
      out.write("     PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\r\n");
      out.write("    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\" >\r\n");
      out.write("<head>\r\n");
      out.write("  ");
      out.print(com.polarion.portal.tomcat.SupportedBrowsers.getXUACompatibleTag(request));
      out.write("\r\n");
      out.write("  <meta name=\"apple-itunes-app\" content=\"app-id=600778564\">  \r\n");
      out.write("  <title>");
      out.print( request.getParameter("title"));
      out.write("</title>\r\n");
      out.write("\r\n");
      out.write("  <link rel=\"shortcut icon\" href=\"/polarion/ria/images/favicon.ico?buildId=");
      out.print( BootPlugin.getPolarionBuildNumber() );
      out.write("\" />\r\n");
      out.write("  <link rel=\"stylesheet\" type=\"text/css\" href=\"/polarion/activate/activate.css?buildId=");
      out.print( BootPlugin.getPolarionBuildNumber() );
      out.write("\" />\r\n");
      out.write("  <link rel=\"stylesheet\" type=\"text/css\" href=\"/polarion/ria/css/loginPages.css?buildId=");
      out.print( BootPlugin.getPolarionBuildNumber() );
      out.write("\" />\r\n");
      out.write("  <script src=\"/polarion/ria/javascript/jquery-3.0.0.min.js?buildId=");
      out.print( BootPlugin.getPolarionBuildNumber() );
      out.write("\"></script>\r\n");
      out.write("  <script src=\"/polarion/ria/javascript/jquery.xdomainrequest.min.js?buildId=");
      out.print( BootPlugin.getPolarionBuildNumber() );
      out.write("\"></script> \r\n");
      out.write("  <script src=\"/polarion/ria/javascript/loginPages.js?buildId=");
      out.print( BootPlugin.getPolarionBuildNumber() );
      out.write("\" type=\"text/javascript\"></script>\r\n");
      out.write("  <script>\r\n");
      out.write("  \t$(document).ready(function(){\r\n");
      out.write("\t    $('input[id=submitButton]').on('click', function() {\r\n");
      out.write("\t        doSubmit();\r\n");
      out.write("\t    });\r\n");
      out.write("\r\n");
      out.write("\t\t$(window).keydown(function(event){\r\n");
      out.write("\t\t\tif(event.keyCode == 13) {\r\n");
      out.write("\t\t\t\tdoSubmit();\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t    validate();\r\n");
      out.write("\t    checkConditions();\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tfunction checkConditions() {\r\n");
      out.write("\t\tvar isOnlineActivation = ");
      out.print( Boolean.valueOf(request.getParameter("onlineActivation")) );
      out.write(";\r\n");
      out.write("\t\tvar ua = navigator == null ? '' : navigator.userAgent.toLowerCase();\r\n");
      out.write("    \tif (isOnlineActivation && ua.indexOf('msie') != -1 && ua.indexOf('trident/5.0') != -1 && window.location.protocol == 'http:') {\r\n");
      out.write("    \t\tvar message = {content: \"");
      out.print( EscapeChars.forJavascriptString(Localization.getString("activation.message.activationNotSupportedOnIE9", "/polarion/activate/offline")) );
      out.write("\", html: true};\r\n");
      out.write("\t\t\tsetMessageText(message, true);\r\n");
      out.write("\t\t\t$(\".panel\").hide();\r\n");
      out.write("    \t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction doSubmit() {\r\n");
      out.write("\t\tif (validate()) {\r\n");
      out.write("\t\t    setMessage(\"\", false);\r\n");
      out.write("\t        showActivating(true);\r\n");
      out.write("\t        submitForm();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction handleResult(result) {\r\n");
      out.write("\t\tif (result.activated) {\r\n");
      out.write("\t\t\tvar message = {content: \"");
      out.print( request.getParameter("successLabel"));
      out.write("\", html: true};\r\n");
      out.write("\t\t\tsetMessageText(message, false);\r\n");
      out.write("\t\t\t$(\".panel\").hide();\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tsetMessageText(result.message, true);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction setMessageText(messageText, error) {\r\n");
      out.write("\t\tif (messageText) {\r\n");
      out.write("\t\t\tif (messageText.html) {\r\n");
      out.write("\t\t\t\t$(\"#messageText\").html(messageText.content);\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\t$(\"#messageText\").text(messageText.content);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t$(\"#message\").css('display', 'block');\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\t$(\"#messageText\").text(\"\");\r\n");
      out.write("\t\t\t$(\"#message\").css('display', 'none');\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t$(\"#message\").attr(\"class\", error ? \"messageError\" : \"messageInfo\");\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction setMessage(message, error) {\r\n");
      out.write("\t\tvar messageText = null;\r\n");
      out.write("\t\tif (message) {\r\n");
      out.write("\t\t    messageText = {content: message};\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tsetMessageText(messageText, error);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction showActivating(start) {\r\n");
      out.write("\t\tsetSubmitEnabled(!start);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar submitLabel;  \r\n");
      out.write("\t\tif (start) {\r\n");
      out.write("\t\t\tsubmitLabel = \"");
      out.print( request.getParameter("submittingLabel"));
      out.write("\";\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tsubmitLabel = \"");
      out.print( request.getParameter("submitLabel"));
      out.write("\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t$(\"#submitButton\").attr(\"value\", submitLabel);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction setSubmitEnabled(enabled) {\r\n");
      out.write("\t    if (enabled) {\r\n");
      out.write("\t    \t$(\"#submitButton\").removeAttr(\"disabled\");\r\n");
      out.write("\t    } else {\r\n");
      out.write("\t    \t$(\"#submitButton\").attr(\"disabled\", \"disabled\");\r\n");
      out.write("\t    }\r\n");
      out.write("\t}\r\n");
      out.write("  </script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body onresize=\"hideCompanyLogo()\" onload=\"hideCompanyLogo()\" style=\"background-image: url(");
      out.print( System.getProperty("login.background", "/polarion/ria/images/login/background.jpg?buildId="+BootPlugin.getPolarionBuildNumber()) );
      out.write("\" id=\"background\">\r\n");
      out.write("\t<img src=\"/polarion/ria/images/login/siemens_logo.png\" alt=\"Siemens\" id=\"siemensLogo\"/>\r\n");
      out.write("\t\r\n");
      out.write("\t<div id=\"companyAndContainer\">\r\n");
      out.write("\t");
 
		String companylogo = System.getProperty("login.companylogo");
		if (companylogo  != null) {
	
      out.write("\t\r\n");
      out.write("\t\t<img src=\"");
      out.print( companylogo );
      out.write("\" alt=\"YourCompanyLogo\" id=\"companyLogo\"/>\r\n");
      out.write("  \t");
 } 
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"");
      out.print( (request.getParameter("containerClass") == null ? "container" : request.getParameter("containerClass")) );
      out.write("\" id=\"container\">\r\n");
      out.write("\t\t<div id=\"message\" class=\"messageError\" style=\"display: none;\" >\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t <tbody>\r\n");
      out.write("\t\t\t  <tr>\r\n");
      out.write("\t\t\t   <td>\r\n");
      out.write("\t\t\t    <img src=\"/polarion/ria/images/login/exmark_login.png?buildId=");
      out.print( BootPlugin.getPolarionBuildNumber() );
      out.write("\" class=\"infoIcon\">\r\n");
      out.write("\t\t\t   </td>\r\n");
      out.write("\t\t\t   <td>\r\n");
      out.write("\t\t\t    <div id=\"messageText\"></div>\r\n");
      out.write("\t\t\t   </td>\r\n");
      out.write("\t\t\t  </tr>\r\n");
      out.write("\t\t\t </tbody>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t<div class=\"panel\">\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
