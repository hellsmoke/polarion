/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.30
 * Generated at: 2017-05-15 13:18:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Collection;
import java.util.Iterator;
import com.polarion.alm.tracker.model.IWorkItem;
import com.polarion.example.servlet.CurrentUserWorkloadServlet.ProjectTimePair;

public final class currentUserWorkload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("com.polarion.alm.tracker.model.IWorkItem");
    _jspx_imports_classes.add("java.util.Collection");
    _jspx_imports_classes.add("com.polarion.example.servlet.CurrentUserWorkloadServlet.ProjectTimePair");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	    Collection pairs  = (Collection)request.getAttribute("pairs"); 
	    long day = ((Long)request.getAttribute("dayLength")).longValue(); 
	    long hour = 3600 * 1000L;
	    long minute = 60 * 1000L;
	    long total = 0;

      out.write("\r\n");
      out.write("This table shows projects where You have assigned work items.<br />\r\n");
      out.write("<table border='1'>\r\n");
      out.write("<tr><th>Project Name</th><th>Remaining time</th></tr>\r\n");

  	int i = 1;
    for (Iterator iterator = pairs.iterator(); iterator.hasNext();) {
       	ProjectTimePair pair = (ProjectTimePair)iterator.next();
		long days = pair.time / day;
		long hours = (pair.time - days * day) / hour;
		long minutes = (pair.time - days * day - hours * hour) / minute;

		StringBuffer time = new StringBuffer();	
		if (days > 0){
	        time.append(days)
	        	.append(" days ");
		}
		if (hours > 0){
	        time.append(hours)
	        	.append(" hours ");
		}
	    if (minutes > 0){
	        time.append(minutes)
	        	.append(" minutes ");
	    }
	    total += pair.time;
 

      out.write("\r\n");
      out.write("\t<tr><td>");
      out.print(pair.projectName);
      out.write("</td><td>");
      out.print(time.toString());
      out.write("</td></tr> \r\n");
 } 
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("<br/>\r\n");

		long days = total / day;
		long hours = (total - days * day) / hour;
		long minutes = (total - days * day - hours * hour) / minute;
		
		StringBuffer time = new StringBuffer();	
		if( days > 0){
	        time.append(days)
	        	.append(" days ");
		}
	    if (hours > 0){
	        time.append(hours)
	        	.append(" hours ");
	    }
	    if (minutes > 0){
	        time.append(minutes)
	        	.append(" minutes ");
	    }

      out.write("\r\n");
      out.write("Total time: ");
      out.print(time.toString());
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
